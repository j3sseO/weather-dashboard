<div class="rounded-lg bg-gray-800/50 p-4 text-white backdrop-blur-sm">
  <div class="relative mx-auto flex h-48 w-48 items-center justify-center">
    <svg class="h-full w-full -rotate-90 transform" viewBox="0 0 200 200">
      <circle
        cx="100"
        cy="100"
        r="80"
        fill="none"
        stroke="currentColor"
        stroke-width="12"
        class="text-gray-200 opacity-25"></circle>
      <circle
        cx="100"
        cy="100"
        r="80"
        fill="none"
        stroke="currentColor"
        stroke-width="12"
        class="humidity-gauge text-blue-500"
        stroke-linecap="round"></circle>
    </svg>

    <div class="absolute flex flex-col items-center justify-center text-white">
      <span class="humidity-value text-4xl font-semibold"></span>
      <span class="text-sm text-gray-300">Humidity</span>
    </div>
  </div>
</div>

<script>
  import { forecastExampleData } from '../data/exampleData'

  const updateHumidityDisplay = (humidity: number) => {
    // Normalise humidity value between 0 and 100
    const normalisedHumidity = Math.min(100, Math.max(0, humidity))

    const humidityText = document.querySelector('.humidityText')
    const humidityValue = document.querySelector('.humidity-value')
    if (humidityText)
      humidityText.textContent = `${Math.round(normalisedHumidity)}%`
    if (humidityValue)
      humidityValue.textContent = `${Math.round(normalisedHumidity)}%`

    const gauge = document.querySelector('.humidity-gauge') as SVGCircleElement
    if (gauge) {
      const radius = 80
      const circumference = 2 * Math.PI * radius
      const offset = ((100 - normalisedHumidity) / 100) * circumference

      gauge.style.strokeDasharray = `${circumference} ${circumference}`
      gauge.style.strokeDashoffset = offset.toString()

      // Update color based on humidity level
      if (normalisedHumidity < 30) {
        gauge.classList.remove('text-yellow-500', 'text-red-500')
        gauge.classList.add('text-blue-500')
      } else if (normalisedHumidity <= 60) {
        gauge.classList.remove('text-blue-500', 'text-red-500')
        gauge.classList.add('text-yellow-500')
      } else {
        gauge.classList.remove('text-yellow-500', 'text-blue-500')
        gauge.classList.add('text-red-500')
      }
    }
  }

  // Initial setup
  updateHumidityDisplay(
    forecastExampleData.weatherData.weatherData.timelines.daily[0].values
      .humidityAvg ?? 0,
  )

  // Update on day selection
  window.addEventListener('daySelected', (event: any) => {
    updateHumidityDisplay(
      forecastExampleData.weatherData.weatherData.timelines.daily[
        event.detail.selectedIndex
      ].values.humidityAvg ?? 0,
    )
  })
</script>
