---
import { forecastExampleData } from '../data/exampleData'
---

<div class="rounded-lg bg-gray-800/50 p-4 text-white backdrop-blur-sm">
  <h2 class="text-sm text-gray-400">Humidity</h2>

  <div class="relative mx-auto mt-4 h-32 w-32">
    <div class="relative h-full w-full">
      <svg class="h-full w-full" viewBox="0 0 100 100">
        <!-- Clipping path for the circle -->
        <defs>
          <clipPath id="circleClip">
            <circle cx="50" cy="50" r="45"></circle>
          </clipPath>
        </defs>

        <circle cx="50" cy="50" r="45" class="fill-gray-800/80"></circle>

        <path
          d="M0 100 L0 45 Q25 35, 50 45 Q75 55, 100 45 L100 100 Z"
          class="fill-blue-900/30"
          clip-path="url(#circleClip)"></path>

        <circle
          cx="50"
          cy="50"
          r="45"
          fill="none"
          class="stroke-white/20"
          stroke-width="2"></circle>

        <circle
          cx="50"
          cy="50"
          r="45"
          fill="none"
          class="progress-circle stroke-white/60 [stroke-dasharray:283]"
          stroke-width="2"
          stroke-linecap="round"
          transform="rotate(-90 50 50)"></circle>
      </svg>

      <div class="absolute inset-0 flex items-center justify-center">
        <span class="humidity-text text-3xl font-medium text-white"></span>
      </div>
    </div>
  </div>
</div>

<style>
  .progress-circle {
    transition: stroke-dashoffset 0.5s ease;
  }
</style>

<script>
  import { forecastExampleData } from '../data/exampleData'

  const updateHumidityDisplay = (humidity: number) => {
    const normalizedHumidity = Math.min(100, Math.max(0, humidity))

    const progressCircle = document.querySelector(
      '.progress-circle',
    ) as SVGCircleElement
    if (progressCircle) {
      const circumference = 2 * Math.PI * 45 // 2Ï€r where r=45
      const offset = circumference * (1 - normalizedHumidity / 100)
      progressCircle.style.strokeDashoffset = offset.toString()
    }

    const humidityText = document.querySelector('.humidity-text')
    if (humidityText)
      humidityText.textContent = `${Math.round(normalizedHumidity)}%`
  }

  // Initial setup
  updateHumidityDisplay(
    forecastExampleData.weatherData.weatherData.timelines.daily[0].values
      .humidityAvg ?? 0,
  )

  // Update on day selection
  window.addEventListener('daySelected', (event: any) => {
    updateHumidityDisplay(
      forecastExampleData.weatherData.weatherData.timelines.daily[
        event.detail.selectedIndex
      ].values.humidityAvg ?? 0,
    )
  })
</script>
