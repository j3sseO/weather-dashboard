<div
  class="flex min-h-screen flex-col items-center justify-center space-y-8 bg-opacity-0 p-6"
>
  <div class="space-y-4 text-center">
    <div class="flex justify-center">
      <div class="relative">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-16 w-16 text-gray-100"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
          ></path>
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
      </div>
    </div>
    <h2 class="text-2xl font-semibold text-gray-300">
      Welcome to the Weather Dashboard
    </h2>
    <p class="mx-auto max-w-md text-gray-100">
      To show you local weather conditions, we need access to your location
    </p>
  </div>

  <div class="w-full max-w-md">
    <button
      id="getLocationBtn"
      class="flex w-full items-center justify-center gap-2 rounded-lg bg-blue-600 px-4 py-3 text-white transition-colors hover:bg-blue-700"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
        ></path>
      </svg>
      Get my location
    </button>

    <p class="mt-4 text-center text-sm text-gray-100">
      Your browser will ask for permission to access your location. This
      information is only used to show you relevant weather data.
    </p>
  </div>

  <div id="loadingState" class="hidden space-y-4 text-center">
    <div
      class="mx-auto h-10 w-10 animate-spin rounded-full border-b-2 border-blue-200"
    >
    </div>
    <p class="text-gray-400">Fetching weather data...</p>
  </div>
</div>

<script>
  import { storage } from '../data/storage'

  // Handle loading state visibility
  const button = document.getElementById('getLocationBtn') as HTMLButtonElement
  const loadingState = document.getElementById('loadingState')

  function resetLoadingState() {
    if (button) {
      button.classList.remove('opacity-50', 'cursor-not-allowed')
      button.disabled = false
    }
    if (loadingState) loadingState.classList.add('hidden')
  }

  function showError(message: string) {
    // Create error notification
    const errorDiv = document.createElement('div')
    errorDiv.className =
      'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg'
    errorDiv.textContent = message
    document.body.appendChild(errorDiv)

    // Remove after 5 seconds
    setTimeout(() => errorDiv.remove(), 5000)
  }

  if (button) {
    button.addEventListener('click', () => {
      button.classList.add('opacity-50', 'cursor-not-allowed')
      button.disabled = true
      if (loadingState) loadingState.classList.remove('hidden')

      // Set timeout for location request
      const timeoutId = setTimeout(() => {
        resetLoadingState()
        showError('Location request timed out. Please try again.')
      }, 10000) // 10 second timeout

      getLocation().finally(() => {
        clearTimeout(timeoutId)
      })
    })
  }

  async function fetchWeatherData(latitude: number, longitude: number) {
    const response = await fetch('/api/getCurrentWeather', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ lat: latitude, lon: longitude }),
    })

    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`)

    const weatherData = await response.json()
    console.log('Weather data:', weatherData)

    // Store the new weather data
    storage.setWeatherData(weatherData)
    document.dispatchEvent(new Event('weatherDataUpdated'))

    return weatherData
  }

  async function getLocation() {
    if (!navigator.geolocation) {
      resetLoadingState()
      showError('Geolocation is not supported by this browser.')
      return
    }

    try {
      const position = await new Promise<GeolocationPosition>(
        (resolve, reject) => {
          navigator.permissions.query({ name: 'geolocation' }).then(result => {
            if (result.state === 'denied') {
              // Force permissions prompt by clearing site settings
              const msg =
                'Location access was denied. Please enable location access in your browser settings and try again.'
              showError(msg)
              resetLoadingState()
              reject(new Error(msg))
              return
            }

            navigator.geolocation.getCurrentPosition(resolve, reject)
          })
        },
      )

      const { latitude, longitude } = position.coords
      console.log('Coordinates:', { latitude, longitude })

      await fetchWeatherData(latitude, longitude)
    } catch (error) {
      console.error('Error:', error)
      storage.clearWeatherData() // Clear potentially corrupt data

      // Handle specific geolocation errors
      if (error instanceof GeolocationPositionError) {
        switch (error.code) {
          case error.PERMISSION_DENIED:
            showError(
              'Location access was denied. Please enable location access in your browser settings and try again.',
            )
            break
          case error.POSITION_UNAVAILABLE:
            showError('Location information is unavailable. Please try again.')
            break
          case error.TIMEOUT:
            showError('Location request timed out. Please try again.')
            break
          default:
            showError(
              'An error occurred while getting your location. Please try again.',
            )
        }
      }

      resetLoadingState()
    }
  }
</script>

<style>
  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
</style>
