<div
  class="flex h-64 h-full w-full items-center justify-center rounded-lg bg-gray-800/50"
>
  <canvas id="temperatureChart" class="p-6"></canvas>
</div>

<script>
  import Chart from 'chart.js/auto'
  import { storage } from '../data/storage'

  const weatherData = storage.getWeatherData()

  window.addEventListener('daySelected', (event: any) => {
    console.log('Day selected:', event.detail.selectedIndex)
  })

  let chart: Chart<'line', number[], unknown> | null = null

  function updateChart(selectedDay: number) {
    // Calculate start and end indexes for the selected day
    const startIndex = selectedDay * 24
    const endIndex = startIndex + 24

    // Get the data for the selected 24-hour period
    const times = weatherData?.weatherData.weatherData.timelines.hourly
      .slice(startIndex, endIndex)
      .map(hour => hour.time)

    const formattedTimes = times
      ?.filter(
        (_, index, array) =>
          index === 0 || index % 2 === 0 || index === array.length - 1,
      )
      .map(time => time.split('T')[1].slice(0, 5))

    const temperatures = weatherData?.weatherData.weatherData.timelines.hourly
      .slice(startIndex, endIndex)
      .filter(
        (_, index, array) =>
          index === 0 || index % 2 === 0 || index === array.length - 1,
      )
      .map(hour => Number(hour.values.temperature.toFixed(0)))
      .map(hour => {
        if (hour === -0) return 0
        return hour
      })

    // If chart exists, destroy it before creating a new one
    if (chart) chart.destroy()

    const ctx = document.getElementById('temperatureChart') as HTMLCanvasElement
    chart = new Chart(ctx, {
      type: 'line',
      data:
        temperatures && formattedTimes
          ? {
              labels: formattedTimes,
              datasets: [
                {
                  data: temperatures,
                  fill: true,
                  borderColor: 'rgba(255, 255, 255, 0.8)',
                  backgroundColor: 'rgba(255, 255, 255, 0.1)',
                  tension: 0.4,
                  pointRadius: 4,
                  pointBackgroundColor: 'rgba(255, 255, 255, 0.8)',
                },
              ],
            }
          : { labels: [], datasets: [] },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: { legend: { display: false } },
        scales: {
          y: {
            display: false,
            suggestedMin: temperatures ? Math.min(...temperatures) - 2 : 0,
            suggestedMax: temperatures ? Math.max(...temperatures) + 2 : 0,
          },
          x: {
            grid: { color: 'rgba(255, 255, 255, 0.1)' },
            ticks: { color: 'rgba(255, 255, 255, 0.8)' },
          },
        },
        elements: {
          point: {
            // This will show the temperature values above each point
            // afterDraw: (chart: any) => {
            //   const ctx = chart.ctx
            //   chart.data.datasets.forEach((dataset: any, i: number) => {
            //     const meta = chart.getDatasetMeta(i)
            //     meta.data.forEach((point: any, index: number) => {
            //       const value = dataset.data[index]
            //       const x = point.x
            //       const y = point.y - 10
            //       ctx.fillStyle = 'white'
            //       ctx.font = '14px Arial'
            //       ctx.textAlign = 'center'
            //       ctx.fillText(`${value}Â°`, x, y)
            //     })
            //   })
            // },
          },
        },
      },
    })
  }

  // Initialize with day 0
  updateChart(0)

  // Listen for day selection changes
  window.addEventListener('daySelected', (event: any) => {
    updateChart(event.detail.selectedIndex)
  })
</script>
