<div
  class="flex h-64 h-full w-full items-center justify-center rounded-lg bg-gray-800/50"
>
  <canvas id="temperatureChart" class="p-6"></canvas>
</div>

<script>
  import Chart from 'chart.js/auto'
  import ChartDataLabels from 'chartjs-plugin-datalabels'
  import { toZonedTime } from 'date-fns-tz'
  import { storage } from '../data/storage'

  Chart.register(ChartDataLabels)

  let chart: Chart<'line', number[], unknown> | null = null

  const updateUIState = () => {
    const weatherData = storage.getWeatherData()

    function updateChart(selectedDay: number) {
      // Calculate start and end indexes for the selected day
      const startIndex = selectedDay * 24
      const endIndex = startIndex + 24

      // Get the data for the selected 24-hour period
      const times = weatherData?.weatherData.weatherData.timelines.hourly
        .slice(startIndex, endIndex)
        .map(hour => {
          const zonedTime = toZonedTime(
            new Date(hour.time),
            Intl.DateTimeFormat().resolvedOptions().timeZone,
          )
          return zonedTime
        })

      const formattedTimes = times
        ?.filter(
          (_, index, array) =>
            index === 0 || index % 2 === 0 || index === array.length - 1,
        )
        .map(time =>
          time.toLocaleTimeString('en-GB', {
            hour: '2-digit',
            minute: '2-digit',
          }),
        )

      const temperatures = weatherData?.weatherData.weatherData.timelines.hourly
        .slice(startIndex, endIndex)
        .filter(
          (_, index, array) =>
            index === 0 || index % 2 === 0 || index === array.length - 1,
        )
        .map(hour => Number(hour.values.temperature.toFixed(0)))
        .map(hour => {
          if (hour === -0) return 0
          return hour
        })

      // If chart exists, destroy it before creating a new one
      if (chart) chart.destroy()

      const ctx = document.getElementById(
        'temperatureChart',
      ) as HTMLCanvasElement
      chart = new Chart(ctx, {
        type: 'line',
        data:
          temperatures && formattedTimes
            ? {
                labels: formattedTimes,
                datasets: [
                  {
                    data: temperatures,
                    fill: true,
                    borderColor: 'rgba(255, 255, 255, 0.8)',
                    backgroundColor: 'rgba(255, 255, 255, 0.1)',
                    tension: 0.4,
                    pointRadius: 4,
                    pointBackgroundColor: 'rgba(255, 255, 255, 0.8)',
                  },
                ],
              }
            : { labels: [], datasets: [] },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            tooltip: { enabled: false },
            datalabels: {
              align: 'top',
              anchor: 'end',
              offset: 4,
              color: 'rgba(255, 255, 255, 0.8)',
              font: {
                size: 12,
              },
              formatter: function (value: number) {
                return value + 'Â°' // Add degree symbol to temperature
              },
            },
          },
          scales: {
            y: {
              display: false,
              suggestedMin: temperatures ? Math.min(...temperatures) - 2 : 0,
              suggestedMax: temperatures ? Math.max(...temperatures) + 2 : 0,
            },
            x: {
              grid: { color: 'rgba(255, 255, 255, 0.1)' },
              ticks: { color: 'rgba(255, 255, 255, 0.8)' },
            },
          },
        },
      })
    }

    // Initialize with day 0
    updateChart(0)

    // Listen for day selection changes
    window.addEventListener('daySelected', (event: any) => {
      updateChart(event.detail.selectedIndex)
    })
  }

  // Initial update
  updateUIState()

  // Listen for weather data updates
  document.addEventListener('weatherDataUpdated', updateUIState)
</script>
