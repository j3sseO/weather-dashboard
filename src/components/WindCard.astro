<div class="rounded-lg bg-gray-800/50 p-4 text-white backdrop-blur-sm">
  <h2 class="text-sm text-gray-400">Wind</h2>

  <div class="relative mx-auto mt-4 h-40 w-40">
    <svg class="h-full w-full" viewBox="0 0 100 100">
      <circle
        cx="50"
        cy="50"
        r="45"
        fill="none"
        class="stroke-white/20"
        stroke-width="8"></circle>

      <circle
        cx="50"
        cy="50"
        r="45"
        fill="none"
        class="wind-progress stroke-white/60 [stroke-dasharray:283]"
        stroke-width="8"
        stroke-linecap="round"
        transform="rotate(-90 50 50)"></circle>
    </svg>

    <div
      class="absolute inset-0 flex flex-col items-center justify-center text-center"
    >
      <span class="wind-direction text-4xl font-medium"></span>
      <span class="wind-cardinal text-base text-gray-300"></span>
      <span class="wind-speed mt-3 text-xl"></span>
    </div>
  </div>
</div>

<style>
  .wind-progress {
    transition: stroke-dashoffset 0.5s ease;
  }
</style>

<script>
  import { forecastExampleData } from '../data/exampleData'

  const degreesToCardinal = (degrees: number): string => {
    const directions = [
      'N',
      'NNE',
      'NE',
      'ENE',
      'E',
      'ESE',
      'SE',
      'SSE',
      'S',
      'SSW',
      'SW',
      'WSW',
      'W',
      'WNW',
      'NW',
      'NNW',
    ]
    const index = Math.round(degrees / 22.5) % 16
    return directions[index]
  }

  const updateWindDisplay = (windDirection: number, windSpeed: number) => {
    // Normalize wind direction to be between 0 and 360
    windDirection = ((windDirection % 360) + 360) % 360

    // Update direction text and cardinal direction
    const directionElement = document.querySelector('.wind-direction')
    const cardinalElement = document.querySelector('.wind-cardinal')
    if (directionElement)
      directionElement.textContent = `${Math.round(windDirection)}°`
    if (cardinalElement)
      cardinalElement.textContent = degreesToCardinal(windDirection)

    // Update speed
    const speedElement = document.querySelector('.wind-speed')
    if (speedElement) speedElement.textContent = `${Math.round(windSpeed)} kmh`

    // Update progress circle
    const progressCircle = document.querySelector(
      '.wind-progress',
    ) as SVGCircleElement
    if (progressCircle) {
      const circumference = 282.7433388230814 // Exactly 2 * π * 45
      const offset = circumference - (windDirection / 360) * circumference
      progressCircle.style.strokeDashoffset = offset.toString()
    }
  }

  // Initial setup
  updateWindDisplay(
    forecastExampleData.weatherData.weatherData.timelines.daily[0].values
      .windDirectionAvg ?? 0,
    forecastExampleData.weatherData.weatherData.timelines.daily[0].values
      .windSpeedAvg ?? 0,
  )

  // Update on day selection
  window.addEventListener('daySelected', (event: any) => {
    updateWindDisplay(
      forecastExampleData.weatherData.weatherData.timelines.daily[
        event.detail.selectedIndex
      ].values.windDirectionAvg ?? 0,
      forecastExampleData.weatherData.weatherData.timelines.daily[
        event.detail.selectedIndex
      ].values.windSpeedAvg ?? 0,
    )
  })
</script>
