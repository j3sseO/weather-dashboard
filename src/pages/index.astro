---
import LocationButton from '../components/LocationButton.astro'
import { forecastExampleData } from '../data/exampleData'
import weatherCodes from '../data/weatherCodes.json'
import DaySelector from '../components/DaySelector.astro'
import TemperatureGraph from '../components/TemperatureGraph.astro'
import UVIndexCard from '../components/UVIndexCard.astro'
import HumidityCard from '../components/HumidityCard.astro'
import WindCard from '../components/WindCard.astro'

const dailyTemperatures = Array.from({ length: 6 }, (_, dayIndex) => {
  const startIdx = dayIndex * 24
  return forecastExampleData.weatherData.weatherData.timelines.hourly
    .slice(startIdx, startIdx + 24)
    .map(hour => ({
      temperature: hour.values.temperature,
      time: hour.time,
    }))
})

const initialTemperatures = dailyTemperatures[0].map(hour => hour.temperature)
const initialTimes = dailyTemperatures[0].map(hour => hour.time)
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4" defer></script>
    <title>Astro</title>
  </head>
  <body>
    <div
      class="flex h-screen flex-col items-center bg-gradient-to-b from-slate-800 to-slate-900 p-4"
    >
      <div class="w-full">
        <LocationButton />
      </div>
      <div class="flex flex-col items-center space-y-2">
        <h2 class="text-2xl font-bold text-white" id="weather-location">
          {forecastExampleData.locationData.address.city_district},
          {forecastExampleData.locationData.address.city}
        </h2>
        <h2 class="text-3xl font-semibold text-white" id="weather-temp">
          {
            forecastExampleData.weatherData.currentData.data.values.temperature.toFixed(
              1,
            )
          }°C
        </h2>
        <div class="flex flex-col items-center">
          <p class="text-white" id="weather-description">
            {
              weatherCodes.weatherCode[
                forecastExampleData.weatherData.currentData.data.values.weatherCode.toString() as keyof typeof weatherCodes.weatherCode
              ] ?? 'Unknown'
            }
          </p>
          <p class="text-gray-400" id="weather-description">
            Feels like {
              forecastExampleData.weatherData.currentData.data.values.temperatureApparent.toFixed(
                1,
              )
            }°C
          </p>
        </div>
      </div>
      <div class="flex w-full flex-col gap-8 px-24">
        <div class="grid grid-cols-[0.5fr_1.5fr] gap-8">
          <DaySelector
            dailyWeatherData={forecastExampleData.weatherData.weatherData
              .timelines.daily}
          />
          <TemperatureGraph />
        </div>
        <div class="grid grid-cols-[0.5fr_0.5fr_0.5fr] gap-4">
          <UVIndexCard />
          <HumidityCard />
          <WindCard />
        </div>
      </div>
    </div>
  </body>
</html>
