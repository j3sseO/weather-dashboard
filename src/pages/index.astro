---
import DaySelector from '../components/DaySelector.astro'
import DataGraph from '../components/DataGraph.astro'
import UVIndexCard from '../components/UVIndexCard.astro'
import HumidityCard from '../components/HumidityCard.astro'
import WindCard from '../components/WindCard.astro'
import EmptyState from '../components/EmptyState.astro'
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4" defer></script>
    <title>Weather Dashboard</title>
    <style>
      #empty-state,
      #weather-dashboard {
        opacity: 0;
        transition: opacity 0.2s;
      }

      #empty-state.visible,
      #weather-dashboard.visible {
        opacity: 1;
      }
    </style>
  </head>
  <body class="bg-gradient-to-b from-slate-800 to-slate-900">
    <div id="empty-state">
      <EmptyState />
    </div>
    <div
      class="flex min-h-screen flex-col items-center bg-gradient-to-b from-slate-800 to-slate-900 p-4 opacity-0 transition-opacity duration-200"
      id="weather-dashboard"
    >
      <div class="absolute right-3 top-3 mr-auto">
        <button
          id="tempUnitButton"
          class="rounded-lg border border-white/10 bg-gray-800/50 bg-white/10 px-3 py-1 text-white backdrop-blur-sm transition-colors hover:bg-white/10"
        ></button>
      </div>
      <div class="mt-16 flex flex-col items-center space-y-2 sm:mt-8">
        <h2
          class="text-center text-2xl font-bold text-white"
          id="weather-location"
        >
        </h2>
        <h2 class="text-3xl font-semibold text-white" id="weather-temp"></h2>
        <div class="flex flex-col items-center">
          <p class="text-white" id="weather-description"></p>
        </div>
      </div>
      <div
        class="mt-6 flex w-full flex-grow flex-col gap-4 px-2 sm:px-4 lg:px-24"
      >
        <div class="grid grid-cols-1 gap-4 lg:grid-cols-[0.5fr_1.5fr]">
          <DaySelector />
          <DataGraph />
        </div>
        <h2 class="pb-1 pt-10 text-2xl text-white">Day Averages</h2>
        <div class="grid grid-cols-1 gap-4 lg:grid-cols-3">
          <UVIndexCard />
          <HumidityCard />
          <WindCard />
        </div>
      </div>
    </div>
  </body>
</html>

<script>
  import { storage } from '../data/storage'
  import weatherCodes from '../data/weatherCodes.json'
  import { celsiusToFahrenheit, setActiveButton } from '../data/utilities'

  const weatherDashboard = document.getElementById('weather-dashboard')
  const emptyState = document.getElementById('empty-state')

  const weatherLocation = document.getElementById('weather-location')
  const weatherTemp = document.getElementById('weather-temp')
  const weatherDescription = document.getElementById('weather-description')
  const weatherTemperature = document.getElementById('weather-temperature')
  const tempUnitButton = document.getElementById('tempUnitButton')

  function updateUIState() {
    const weatherData = storage.getWeatherData()
    const tempUnit = storage.temperatureUnit.get()

    if (tempUnitButton)
      tempUnitButton.textContent = `°${tempUnit === 'fahrenheit' ? 'F' : 'C'}`

    if (weatherData) {
      weatherDashboard?.classList.remove('hidden')
      weatherDashboard?.classList.add('visible')
      emptyState?.classList.add('hidden')
      emptyState?.classList.remove('visible')

      // Update weather information
      if (weatherLocation)
        weatherLocation.textContent =
          weatherData.locationData.display_name ?? 'Unknown location'

      if (weatherTemp) {
        const temp = weatherData.weatherData.currentData.data.values.temperature
        const displayTemp =
          tempUnit === 'fahrenheit' ? celsiusToFahrenheit(temp) : temp
        weatherTemp.textContent = `${Math.round(displayTemp)}°${tempUnit === 'fahrenheit' ? 'F' : 'C'}`
      }

      if (weatherDescription) {
        weatherDescription.textContent = `${
          weatherCodes.weatherCode[
            weatherData.weatherData.currentData.data.values.weatherCode.toString() as keyof typeof weatherCodes.weatherCode
          ] ?? 'Unknown'
        }`
      }

      if (weatherTemperature) {
        const feelTemp =
          weatherData.weatherData.currentData.data.values.temperatureApparent
        const displayFeelTemp =
          tempUnit === 'fahrenheit' ? celsiusToFahrenheit(feelTemp) : feelTemp
        weatherTemperature.textContent = `Feels like ${displayFeelTemp.toFixed(1)}°${tempUnit === 'fahrenheit' ? 'F' : 'C'}`
      }
    } else {
      weatherDashboard?.classList.add('hidden')
      weatherDashboard?.classList.remove('visible')
      emptyState?.classList.remove('hidden')
      emptyState?.classList.add('visible')
    }
  }

  tempUnitButton?.addEventListener('click', () => {
    const tempUnit = storage.temperatureUnit.get()
    if (tempUnit === 'celsius') {
      tempUnitButton.textContent = '°F'
      storage.temperatureUnit.set('fahrenheit')
    } else {
      tempUnitButton.textContent = '°C'
      storage.temperatureUnit.set('celsius')
    }

    document.dispatchEvent(new CustomEvent('temperatureUnitChanged'))
    updateUIState()
  })

  // Initial update
  updateUIState()

  // Listen for weather data updates
  document.addEventListener('weatherDataUpdated', updateUIState)
</script>
